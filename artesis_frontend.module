<?php
/**
 * @file
 * Code for the Artesis Frontend feature.
 */

define('IPE_RESTRICTED_ROLE', 'editor');

include_once('artesis_frontend.features.inc');

/**
 * Implements hook_views_default_views_alter().
 *
 * Alter system taxonomy term view to ensure its path doesn't conflict
 * with panel page path.
 */
function artesis_frontend_views_default_views_alter(&$views) {
  if (isset($views['taxonomy_term'])) {
    $views['taxonomy_term']->display['page']->display_options['path'] = 'taxonomy/term/%/views';
  }
}

/**
 * Helper function to get a list of roles that could be assigned to an user
 */
function artesis_user_roles($membersonly = FALSE, $permission = NULL, $account = NULL) {
  $query = db_select('role', 'r');
  $query->addTag('translatable');
  $query->fields('r', array('rid', 'name'));
  $query->orderBy('weight');
  $query->orderBy('name');
  if (!empty($account)) {
    $roles = $account->roles;
    $authenticated = user_role_load(DRUPAL_AUTHENTICATED_RID);
    unset($roles[DRUPAL_AUTHENTICATED_RID]);
    $max_weight = $authenticated->weight;
    foreach ($roles as $rid => $role_name) {
      $role = user_role_load($rid);
      if ($role->weight > $max_weight) {
        $max_weight = $role->weight;
      }
    }
    $query->condition('weight', $max_weight, '<=');
  }
  if (!empty($permission)) {
    $query->innerJoin('role_permission', 'p', 'r.rid = p.rid');
    $query->condition('p.permission', $permission);
  }
  $result = $query->execute();

  $roles = array();
  foreach ($result as $role) {
    switch ($role->rid) {
      // We only translate the built in role names
      case DRUPAL_ANONYMOUS_RID:
        if (!$membersonly) {
          $roles[$role->rid] = t($role->name);
        }
        break;
      case DRUPAL_AUTHENTICATED_RID:
        $roles[$role->rid] = t($role->name);
        break;
      default:
        $roles[$role->rid] = $role->name;
    }
  }

  return $roles;
}

/**
 * Permit users to create only roles that do not exceed theirs
 */
function artesis_frontend_form_alter(&$form, &$forms_state, $form_id) {
  if ($form_id == 'user_profile_form' || $form_id == 'user_register_form') {
    $form['account']['roles']['#access'] = user_access('change user role');

    if (user_access('change user role')) {
      global $user;
      $account = $form['#user'];
      $roles = array_map('check_plain', artesis_user_roles(TRUE, NULL, $user));

      // The disabled checkbox subelement for the 'authenticated user' role
      // must be generated separately and added to the checkboxes element,
      // because of a limitation in Form API not supporting a single disabled
      // checkbox within a set of checkboxes.
      // @todo This should be solved more elegantly. See issue #119038.
      $checkbox_authenticated = array(
        '#type' => 'checkbox',
        '#title' => $roles[DRUPAL_AUTHENTICATED_RID],
        '#default_value' => TRUE,
        '#disabled' => TRUE,
      );
      unset($roles[DRUPAL_AUTHENTICATED_RID]);
      $form['account']['roles'] = array(
        '#type' => 'checkboxes',
        '#title' => t('Roles'),
        '#default_value' => (isset($account->roles) ? array_keys($account->roles) : array()),
        '#options' => $roles,
        DRUPAL_AUTHENTICATED_RID => $checkbox_authenticated,
      );
    }

    // Assume user profile edit form.
    if (arg(0) == 'user' && arg(2) == 'edit') {
      foreach ($form['#validate'] as $k => $v) {
        // Disable the native user form validator, since it validates the email
        // for not being empty.
        if ($v == 'user_account_form_validate') {
          unset($form['#validate'][$k]);
          // Add custom mail validate hadler.
          $form['#validate'][] = 'artesis_frontend_mail_validate';
          break;
        }
      }

      $form['account']['mail']['#required'] = FALSE;
      $form['account']['mail']['#validate'] = array('artesis_frontend_mail_validate');
    }
  }
}

/**
 * Custom validate handler for mail address.
 *
 * @see artesis_frontend_form_alter,
 */
function artesis_frontend_mail_validate($form, &$form_state) {
  $mail = $form_state['values']['mail'];
  if (!empty($mail) && !valid_email_address($mail)) {
    form_set_error('mail', t('E-mail address is not valid.'));
  }
}

/**
 * Implement permissions for users to change only roles, not permissions
 */
function artesis_frontend_permission() {
  return array(
    'change user role' => array(
      'title' => t('Change user role'),
      'description' => t('Allow a user to change only the roles of an user and not the permissions defined by that role.'),
    ),
  );
}

/**
 * Returns a list of plugins that can be inserted
 * on a IPE page by user with IPE_RESTRICTED_ROLE role.
 */
function _artesis_frontend_get_allowed_plugins() {
  // Plugin definition follows ctools convention 'module - plugin name'.
  // Views must be declared by 'views' value.
  // Blocks must be declared by 'block' value.
  return array(
    'ding_nodelist' => 'ding_nodelist',
    'ding_item_list' => 'ding_item_list',
    'alma_item_list' => 'alma_item_list',
    'campaign' => 'campaign',
    'term_description' => 'term_description',
    'ding_item_viewer-item_viewer' => 'block',
    'carousel' => 'carousel',
    'ding_library_opening_hours-ding_library_opened_today' => 'block',
  );
}

/**
 * Implements hook_theme_registry_alter().
 * Replaces original IPE "Add new pane" button theming function with a custom set
 * of links available for site editors.
 */
function artesis_frontend_theme_registry_alter(&$registry) {
  $registry['panels_ipe_add_pane_button']['function'] = '_artesis_frontend_panels_ipe_add_pane_button';
}

/**
 * Custom themeing function that replaces standard "Add new pane" button
 * generated by panels IPE. The code is copied from original theme function
 * defined in IPE sub-module of panels module and slightly modified.
 */
function _artesis_frontend_panels_ipe_add_pane_button($vars) {
  $assets_loaded = &drupal_static('ipe_assets_loaded', FALSE);

  $region_id  = $vars['region_id'];
  $renderer   = $vars['renderer'];
  $menu_width = 150;
  $attributes = array(
    'class' => 'ctools-use-modal',
    'style' => 'width: ' . $menu_width . 'px; height: auto',
  );

  $plugins = _artesis_frontend_get_allowed_plugins();
  $blocks = array_keys($plugins, 'block');
  $views = array_keys($plugins, 'views');
  $buttons = array();

  // Handle plugins first.
  foreach ($plugins as $module => $plugin) {
    if (!in_array($module, $blocks) && !in_array($module, $views)) {
      $plugin_info = ctools_get_content_type($plugin);
      $buttons[] = l($plugin_info['title'], $renderer->get_url('add-pane', $region_id, $module, $plugin), array('attributes' => $attributes));
    }
  }

  // Handle views.
  foreach ($views as $view) {
    $view_obj = views_get_view($view);
    $buttons[] = l($view_obj->human_name, $renderer->get_url('add-pane', $region_id, 'views', $view), array('attributes' => $attributes));
  }

  // Handle blocks.
  foreach ($blocks as $block) {
    list($module, $delta) = explode('-', $block);
    $block_info = module_invoke($module, 'block_info');
    $buttons[] = l($block_info[$delta]['info'], $renderer->get_url('add-pane', $region_id, 'block', $block), array('attributes' => $attributes));
  }

  $buttons = '<div id="ipe-add-' . $region_id . '" class="panels-ipe-newblock ipe-popup">' . theme('item_list', array('items' => $buttons)) . '</div>';

  if (!$assets_loaded) {
    $mod_path = drupal_get_path('module', 'artesis_frontend');
    drupal_add_js($mod_path . '/js/ipe.js', 'file');
    drupal_add_css($mod_path . '/css/ipe.css', 'file');
    $assets_loaded = TRUE;
  }

  return '<div class="panels-ipe-newblock panels-ipe-on">' .  l(t('Add'), NULL, array('attributes' => array('class' => 'ipe-trigger', 'target_region' => $region_id))) . '</div>' . $buttons;
}

/**
 * Store all IPE panes that are not of allowed type
 * for further protecting from deletion.
 */
function artesis_frontend_preprocess_panels_ipe_pane_wrapper($vars) {
  $pane = $vars['pane'];
  $protected_panes = &drupal_static('artesis_frontend_ipe', array());
  $allowed_panes = _artesis_frontend_get_allowed_plugins();
  if (!(in_array($pane->type, array_values($allowed_panes)) && in_array($pane->subtype, array_keys($allowed_panes)))) {
    $protected_panes[] = $pane->pid;
  }
}

/**
 * Implements hook_preprocess_page().
 * Removes delete button on non-nodelist panes for
 * certain use role (IPE_RESTRICTED_ROLE).
 * Additionally, it adds open graph metadata for
 * pages searchResult, ting object and ting collection.
 */
function artesis_frontend_preprocess_page($page) {
  global $user;

  // Detect different pages and add the appropriate open graph metadata.
  $og_elements = array();
  $og_title = '';
  $og_description = '';
  $og_imageurl = '';
  $og_url = '';
  if (arg(0) == 'ting' && arg(1) == 'object' && arg(2) != NULL) {
    $ting_entity = ting_object_load(arg(2));
    if (isset($ting_entity->reply->record['dc:title'])) {
      if (isset($ting_entity->reply->record['dc:title'][0])) {
        if (is_string($ting_entity->reply->record['dc:title'][0])) {
         $og_title = $ting_entity->reply->record['dc:title'][0];
        }
        elseif (is_array($ting_entity->reply->record['dc:title'][0])) {
          if (isset($ting_entity->reply->record['dc:title'][0][0])) {
            $og_title = $ting_entity->reply->record['dc:title'][0][0];
          }
        }
      }
    }
    if (isset($ting_entity->reply->record['dc:description'])) {
      if (isset($ting_entity->reply->record['dc:description'][0])) {
        if (count($ting_entity->reply->record['dc:description'][0]) > 0) {
          $og_description = $ting_entity->reply->record['dc:description'][0][0];
        }
      }
    }
    $og_url = url(NULL, array('absolute' => TRUE)) . current_path();
  }
  elseif (arg(0) == 'ting' && arg(1) == 'collection' && arg(2) != NULL) {
    $ting_collection = ting_object_load(arg(2));
    if (count($ting_collection->reply->record['dc:title']) > 0 ) {
      $first_title_element = array_shift(array_values($ting_collection->reply->record['dc:title']));
      if (isset($first_title_element[0])) {
        if (is_string($first_title_element[0])) {
          $og_title = $first_title_element[0];
        }
      }
      elseif (isset($ting_collection->reply->record['dc:title']['dkdcplus:full'][0])) {
        if (is_string($ting_collection->reply->record['dc:title']['dkdcplus:full'][0])) {
          $og_title = $ting_collection->reply->record['dc:title']['dkdcplus:full'][0];
        }
      }
    }
    if (isset($ting_collection->reply->record['dc:description'])) {
      if (isset($ting_collection->reply->record['dc:description']['dkdcplus:series'][0])) {
        if (is_string($ting_collection->reply->record['dc:description']['dkdcplus:series'][0])) {
          $og_description = $ting_collection->reply->record['dc:description']['dkdcplus:series'][0];
        }
      }
    }
    $og_url = url(NULL, array('absolute' => TRUE)) . current_path();
  }
  elseif (arg(0) == 'search' && arg(1) == 'ting') {
    $og_title = t('Search results');
    $og_description = arg(2) != NULL ? t('Search results for') . ' ' . arg(2) . '.' : url(NULL, array('absolute' => TRUE)) . current_path();
    $og_url = url(NULL, array('absolute' => TRUE)) . current_path();
  }

  if ($og_title !='') {
    $og_elements['og_title'] = array(
      '#tag' => 'meta',
      '#attributes' => array(
        'property' => 'og:title',
        'content' => $og_title,
      ),
    );
  }

  if ($og_description != '') {
    $og_elements['og_description'] = array(
      '#tag' => 'meta',
      '#attributes' => array(
        'property' => 'og:description',
        'content' => $og_description,
      ),
    );
  }

  // @todo find a way to retrieve this.
  if ($og_imageurl != '') {
    $og_elements['og_image'] = array(
      '#tag' => 'meta',
      '#attributes' => array(
        'property' => 'og:image',
        'content' => $og_imageurl,
      ),
    );
  }
  if ($og_url != '') {
    $og_elements['og_url'] = array(
      '#tag' => 'meta',
      '#attributes' => array(
        'property' => 'og:url',
        'content' => $og_url,
      ),
    );
  }
  if (!empty($og_elements)) {
    foreach ($og_elements as $key => $og_element) {
          drupal_add_html_head($og_element, $key);
    }
  }

  if (in_array(IPE_RESTRICTED_ROLE, $user->roles)) {
    $protected_panes = drupal_static('artesis_frontend_ipe', array());
    $panes_selector = array();
    foreach ($protected_panes as $pane_id) {
      $panes_selector[] = 'pane-delete-panel-pane-' . $pane_id;
    }
    if (count($panes_selector)) {
      drupal_add_js('(function($) { $(document).ready(function() { $("#' . join(', #', $panes_selector) . '").parent().remove(); }) })(jQuery);', 'inline');
    }
  }
}

/**
 * Implements hook_entity_view_alter().
 *
 * Remove History section from user profile.
 */
function artesis_frontend_entity_view_alter(&$build, $type) {
  if ($type == 'user') {
    unset($build['summary']);
  }
}

/**
 * Implements hook node_content_view().
 *
 * Strip images in teaser view mode for ding_* content types.
 */
function node_content_view($node, $view_mode, $langcode) {
  if (in_array($node->type, array('ding_page', 'ding_news', 'ding_event')) && $view_mode == 'teaser') {
    $lng = isset($node->field_ding_body[$langcode]) ? $langcode : LANGUAGE_NONE;

    // Cannot find the field, so do nothing.
    if (empty($node->field_ding_body[$lng])) {
      watchdog('artesis_frontend', "Field field_ding_body for language '$lng' not set.", WATCHDOG_DEBUG);
      return $node;
    }

    $node->field_ding_body[$lng][0]['safe_value'] = preg_replace('/<img[^>]+>/i', '', $node->field_ding_body[$lng][0]['safe_value']);
    // Remove empty p's since they prevent from displaying actual content.
    $node->field_ding_body[$lng][0]['safe_value'] = str_replace('<p></p>', '', $node->field_ding_body[$lng][0]['safe_value']);
  }

  return $node;
}

/**
 * Implements hook_preprocess_views_view_fields().
 *
 * Do not show address field if the address is not fully filled.
 */
function artesis_frontend_preprocess_views_view_fields(&$variables) {
  $view = $variables['view'];

  // panel_pane_3 stands for "Left column data" ding event view display.
  if ($view->current_display == 'panel_pane_3') {

    // Required field not found, do nothing.
    if (!isset($variables['fields']['field_address'])) {
      return;
    }

    $field_address = $variables['fields']['field_address'];
    $field_content = $field_address->content;
    if (strpos($field_content, 'street-block') === FALSE || strpos($field_content, 'locality-block') === FALSE) {
      unset($variables['fields']['field_address']);
    }
  }
}

/**
 * Implements hook_block_info().
 */
function artesis_frontend_block_info() {
  $blocks = array();

  // RSS Icon block.
  $blocks['rss_icon'] = array(
    'info' => t('RSS Icon'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
    'status' => 1,
    'region' => 'content',
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'pages' => '',
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function artesis_frontend_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    // RSS Icon block.
    case 'rss_icon':
      $url = NULL;
      $title = NULL;

      // Check if we have RSS link in html head.
      $headers = drupal_add_html_head();
      foreach ($headers as $k => $v) {
        if ($v['#tag'] == 'link' && $v['#attributes']['rel'] == 'alternate' && $v['#attributes']['type'] == 'application/rss+xml') {
          $title = $v['#attributes']['title'];
          $url = $v['#attributes']['href'];
          break;
        }
      }
      // Show the block in case the rss for this page is given.
      if (!empty($url)) {
        $text = t('Subscribe to !feed-title', array('!feed-title' => $title));
        $image = theme('image', array(
          'path' => 'misc/feed.png',
          'width' => 16,
          'height' => 16,
          'alt' => $text,
        ));

        $block['subject'] = NULL;
        $block['content'] = array(
          '#theme' => 'link',
          '#text' => $image,
          '#options'=> array(
            'html' => TRUE,
            'attributes' => array(
              'class' => array('rss-icon'),
              'title' => $text,
            ),
          ),
          '#path' => $url,
        );
      }
      break;
  }

  return $block;
}
