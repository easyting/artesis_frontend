<?php
/**
 * @file
 * Adds extra panels variants functionality for artesis frontend.
 */

/**
 * Helper function that returns an empty variant ready to be set up.
 */
function _artesis_frontend_variants_create_variant($term = NULL) {
  if (is_null($term)) {
    return FALSE;
  }
  // Fetch all term view variants;
  $page = 'term_view';
  $task = page_manager_get_task($page);
  ctools_get_plugins('page_manager', 'task_handlers', 'panel_context');

  // Choose Artesis taxonomy EB variant.
  $handlers = page_manager_load_sorted_handlers($task, '', TRUE);
  $handler = $handlers['term_view_panel_context_2'];
  if (empty($handler)) {
    watchdog('Artesis frontend variants', 'Can not find default template for creating a variant for the term %termid.',  array('%termid' => $term->tid));
    return FALSE;
  }
  // Generate some unique names and other needed info.
  $handler_name = 'term_view_term_id_' . $term->tid;
  $variant_title = 'Variant for ' . $term->name;
  $access_plugin_settings = array(
    'vid' => $term->vid,
    $term->vid => array(
      $term->tid => $term->tid,
    ),
  );

  // Maintain variables from hardcoded version of variant creation.
  $pipeline = module_exists('panels_ipe') ? 'ipe' : 'standard';
  $handler->name = $handler_name;
  $handler->conf['title'] = $variant_title;
  $handler->conf['pipeline'] = $pipeline;
  $handler->conf['access']['plugins'][0]['settings'] = $access_plugin_settings;
  $handler->conf['access']['plugins'][0]['name'] = 'term';
  // Assign weight 'higher' than the default template's.
  $handler->weight = -50;
  // Add relationships.
  $handler->conf['relationships'][0] = array(
    'identifier' => 'Taxonomy vocabulary from Taxonomy term (on taxonomy_term_data.vocabulary)',
    'keyword' => 'taxonomy_vocabulary',
    'name' => 'entity_from_schema:vid-taxonomy_term-taxonomy_vocabulary',
    'context' => 'argument_term_1',
    'id' => 1,
  );
  // Save the handler.
  page_manager_save_task_handler($handler);
  return TRUE;
}

/**
 * Implements hook_taxonomy_term_insert().
 */
function artesis_frontend_variants_taxonomy_term_insert($term) {
  $voc = taxonomy_vocabulary_machine_name_load('eddb_editorial_base');
  // Fire logic only for editorial base vocabulary.
  if ($voc && $voc->vid == $term->vid) {
    // Add a menu link.
    $link = array();
    $link['link_path'] = 'taxonomy/term/' . $term->tid;
    $link['link_title'] = $term->name;
    $link['menu_name'] = 'main-menu';
    $link['weight'] = $term->weight;

    $parent = array_pop($term->parent);
    if ($parent) {
      $parent_term = taxonomy_term_load($parent);
      $plid = artesis_frontend_variants_get_menu_item_mlid($parent_term->name, 'main-menu');

      if ($plid) {
        $link['plid'] = $plid;
      }
    }

    menu_link_save($link);
    menu_cache_clear_all();

    // Add a new variant for the given term.
    ctools_include('plugins');
    $handler = _artesis_frontend_variants_create_variant($term);
    if ($handler) {
      drupal_set_message(t("Variant created for term '@term'.", array('@term' => $term->name)));
    }
  }
}

/**
 * Implements hook_taxonomy_term_delete().
 *
 * Since the taxonomy and the menus can be renamed without affecting each other,
 * this will delete only the menus matching the taxonomy term by name.
 */
function artesis_frontend_variants_taxonomy_term_delete($term) {
  $voc = taxonomy_vocabulary_machine_name_load('eddb_editorial_base');
  // Fire logic only for editorial base vocabulary.
  if ($voc->vid == $term->vid) {
    $mlid = artesis_frontend_variants_get_menu_item_mlid($term->name, 'main-menu');

    // Delete menu item.
    if ($mlid) {
      menu_link_delete($mlid);
    }

    // Delete variant.
    $handler_name = 'term_view_term_id_' . $term->tid;
    $handler = new stdClass();
    $handler->name = $handler_name;
    $handler->handler = 'panel_context';
    ctools_include('plugins');
    page_manager_delete_task_handler($handler);
    drupal_set_message(t("Variant for term '@term' deleted.", array('@term' => $term->name)));

  }
}

/**
 * Get menu item id by it's name.
 *
 * @param string $name
 *   Menu name to seek.
 *
 * @return int
 *   Menu id (mlid), or 0.
 */
function artesis_frontend_variants_get_menu_item_mlid($name, $menu = 'main-menu') {
  $menu_links = menu_load_links($menu);

  foreach ($menu_links as $link) {
    if ($link['link_title'] == $name) {
      return $link['mlid'];
    }
  }

  return 0;
}

/**
 * Implements hook_ctools_plugin_api().
 */
function artesis_frontend_variants_ctools_plugin_api() {
  list($module, $api) = func_get_args();
  if ($module == "page_manager" && $api == "pages_default") {
    return array("version" => "1");
  }
}

/**
 * Implements hook_taxonomy_term_update().
 *
 * Update menu link item when modifying term.
 */
function artesis_frontend_variants_taxonomy_term_update($term) {
  // Check if the term belongs to 'Section' vocabulary.
  $voc = taxonomy_vocabulary_machine_name_load('eddb_editorial_base');
  if (!empty($voc) && $voc->vid != $term->vid) {
    return;
  }
  unset($voc);

  // Get menu link by term path.
  $link = menu_link_get_preferred($term->path['source']);

  if ($link) {
    // Modify menu link.
    $link['link_title'] = $term->name;
    $link['weight'] = $term->weight;

    // Update parent.
    $parent = array_pop($term->parent);
    if ($parent) {
      $parent_term = taxonomy_term_load($parent);
      $plid = artesis_frontend_variants_get_menu_item_mlid($parent_term->name, 'main-menu');
      unset($parent_term);

      if ($plid) {
        $link['plid'] = $plid;
      }
    }
    else {
      // Parent is root.
      $link['plid'] = 0;

      // Update parents.
      $link['p1'] = $link['mlid'];
      for ($i = 2; $i < 10; $i++) {
        $link['p' . $i] = 0;
      }

    }

    // Save modified menu link.
    menu_link_save($link);

    // Clear menu cache.
    menu_cache_clear_all();
    unset($link);
  }
  else {
    watchdog('artesis_frontend_variants',
      'Menu link for @term was not found', array('@term' => $tern->name)
    );
  }
}

/**
 * Implements hook_form_alter().
 */
function artesis_frontend_variants_form_alter(&$form, &$form_state, $form_id) {
  // Apply only to 'Section' vocabulary.
  if ($form_id == 'taxonomy_overview_terms' && $form['#vocabulary']->machine_name == 'eddb_editorial_base') {
    $form['#submit'][] = '_artesis_frontend_variants_reorder_menu';
  }
}

/**
 * Reorder menu items based on new term weights and parents.
 */
function _artesis_frontend_variants_reorder_menu($form, &$form_state) {
  // Get term weights and parents.
  $terms = array();
  $tree = array();
  foreach ($form_state['values'] as $k => $v) {
    if (strpos($k, 'tid:') === 0) {
      $terms[$v['tid']] = array(
        'tid' => $v['tid'],
        'parent' => $v['parent'],
        'weight' => $v['weight'],
        'depth' => $v['depth'],
      );

      // Build partial tree.
      $tree[$v['parent']][] = $v['tid'];
    }
  }

  // Load menu items.
  $menu = menu_tree_all_data('main-menu');

  // Set new weight/parent for each item.
  $min_weight = -50;
  foreach ($menu as $v) {
    // Get minimal weight for term links in main menu.
    if ($v['link']['router_path'] != 'taxonomy/term/%') {
      $min_weight = $v['link']['weight'];
    }
  }
  unset($menu);

  // Rebuild menu items.
  foreach ($tree[0] as $tid) {
    _artesis_frontend_variants_reorder_menu_item($terms[$tid], $tree, $terms, $min_weight);
  }

  // All done, clear cache.
  menu_cache_clear_all();
}

/**
 * Update menu item.
 *
 * @param array $item
 *   Info about current term.
 * @param array $tree
 *   Partial tree structure.
 * @param array $terms
 *   Info about all terms.
 * @param int $min_weight
 *   Minimal weight for root menu links.
 */
function _artesis_frontend_variants_reorder_menu_item($item, $tree, $terms, $min_weight = NULL) {
  $tid = $item['tid'];
  $link = menu_link_get_preferred('taxonomy/term/' . $tid, 'main-menu');

  if (empty($link)) {
    watchdog('artesis_frontend_variants',
      'Menu link for @term was not found (reorder menu item)', array('@term' => $tid)
    );
    return;
  }

  // Set new weight.
  $weight = $item['weight'];

  // For root elements set weight depending on $min_weight.
  if ($item['depth'] == 1) {
    $weight += $min_weight + 1;
  }
  $link['weight'] = $weight;
  $link['depth'] = $item['depth'];

  // Set parents.
  if ($item['parent'] == 0) {
    // Root item.
    $link['p1'] = $link['mlid'];
    for ($i = 2; $i < 10; $i++) {
      $link['p' . $i] = 0;
    }
    $link['plid'] = 0;
  }
  else {
    // Get parent menu item.
    $parent_link = menu_link_get_preferred('taxonomy/term/' . $item['parent'], 'main-menu');
    $link['plid'] = $parent_link['mlid'];

    // Copy parents from parent.
    for ($i = 1; $i < 10; $i++) {
      $link['p' . $i] = $parent_link['p' . $i];
    }

    // Set current link to parent in proper depth.
    $link['p' . $item['depth']] = $link['mlid'];
  }

  // Save changes.
  menu_link_save($link);

  // Update child items.
  if (!empty($tree[$tid])) {
    foreach ($tree[$tid] as $ctid) {
      _artesis_frontend_variants_reorder_menu_item($terms[$ctid], $tree, $terms);
    }
  }
}
